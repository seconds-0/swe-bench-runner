name: E2E Tests (Real API)

on:
  # Manual trigger only - these tests cost money!
  workflow_dispatch:
    inputs:
      scenario:
        description: 'Test scenario to run (1-4, or empty for all)'
        required: false
        default: '1'
        type: choice
        options:
          - '1'
          - '2'
          - '3'
          - '4'
          - 'all'
      max_cost:
        description: 'Maximum cost limit in USD'
        required: false
        default: '0.10'
        type: string

  # Weekly run (optional - uncomment if desired)
  # schedule:
  #   - cron: '0 2 * * 1'  # Mondays at 2 AM UTC

jobs:
  e2e-test:
    name: Run E2E Tests with Real APIs
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # Only run in the main repository, not forks
    if: github.repository == 'swebench/runner'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Create E2E log directory
        run: mkdir -p e2e_logs

      - name: Run E2E tests
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          SWEBENCH_E2E_ENABLED: true
          SWEBENCH_E2E_MAX_COST: ${{ github.event.inputs.max_cost || '0.10' }}
          SWEBENCH_NO_INPUT: 1
        run: |
          if [ "${{ github.event.inputs.scenario }}" == "all" ]; then
            ./scripts/run_e2e_test.sh --no-confirm
          else
            ./scripts/run_e2e_test.sh --no-confirm --scenario ${{ github.event.inputs.scenario || '1' }}
          fi

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-logs-${{ github.run_id }}
          path: |
            e2e_logs/
            e2e_test_*.log
            e2e_test_*.json

      - name: Parse test results
        if: always()
        run: |
          # Find the latest test report
          report=$(find . -name "e2e_test_*.json" -mmin -30 | head -1)

          if [ -n "$report" ]; then
            echo "## E2E Test Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Extract key metrics using Python (jq might not be available)
            python3 -c "
          import json
          with open('$report') as f:
              data = json.load(f)
              run = data['test_run']
              print(f\"- **Duration**: {run['duration']:.1f} seconds\")
              print(f\"- **Total Cost**: \${run['total_cost']:.4f}\")
              print(f\"- **Steps Executed**: {run['steps']}\")

              # Count successes and failures
              success = sum(1 for s in data['steps'] if s['level'] == 'SUCCESS')
              errors = sum(1 for s in data['steps'] if s['level'] == 'ERROR')
              warnings = sum(1 for s in data['steps'] if s['level'] == 'WARNING')

              print(f\"- **Results**: {success} ✓ success, {errors} ✗ errors, {warnings} ⚠ warnings\")
            " >> $GITHUB_STEP_SUMMARY
          else
            echo "No test report found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Find test report
            const reports = require('child_process')
              .execSync('find . -name "e2e_test_*.json" -mmin -30')
              .toString()
              .trim()
              .split('\n')
              .filter(Boolean);

            if (reports.length > 0) {
              const report = JSON.parse(fs.readFileSync(reports[0], 'utf8'));
              const run = report.test_run;

              const success = report.steps.filter(s => s.level === 'SUCCESS').length;
              const errors = report.steps.filter(s => s.level === 'ERROR').length;

              const status = errors === 0 ? '✅' : '❌';

              const comment = `## ${status} E2E Test Results

              - **Duration**: ${run.duration.toFixed(1)}s
              - **API Cost**: $${run.total_cost.toFixed(4)}
              - **Results**: ${success} passed, ${errors} failed

              <details>
              <summary>View detailed logs</summary>

              Check the [workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for full logs.
              </details>`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
